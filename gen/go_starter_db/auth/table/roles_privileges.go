//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RolesPrivileges = newRolesPrivilegesTable("auth", "roles_privileges", "")

type rolesPrivilegesTable struct {
	postgres.Table

	// Columns
	RoleID      postgres.ColumnInteger
	PrivilegeID postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type RolesPrivilegesTable struct {
	rolesPrivilegesTable

	EXCLUDED rolesPrivilegesTable
}

// AS creates new RolesPrivilegesTable with assigned alias
func (a RolesPrivilegesTable) AS(alias string) *RolesPrivilegesTable {
	return newRolesPrivilegesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RolesPrivilegesTable with assigned schema name
func (a RolesPrivilegesTable) FromSchema(schemaName string) *RolesPrivilegesTable {
	return newRolesPrivilegesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RolesPrivilegesTable with assigned table prefix
func (a RolesPrivilegesTable) WithPrefix(prefix string) *RolesPrivilegesTable {
	return newRolesPrivilegesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RolesPrivilegesTable with assigned table suffix
func (a RolesPrivilegesTable) WithSuffix(suffix string) *RolesPrivilegesTable {
	return newRolesPrivilegesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRolesPrivilegesTable(schemaName, tableName, alias string) *RolesPrivilegesTable {
	return &RolesPrivilegesTable{
		rolesPrivilegesTable: newRolesPrivilegesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newRolesPrivilegesTableImpl("", "excluded", ""),
	}
}

func newRolesPrivilegesTableImpl(schemaName, tableName, alias string) rolesPrivilegesTable {
	var (
		RoleIDColumn      = postgres.IntegerColumn("role_id")
		PrivilegeIDColumn = postgres.IntegerColumn("privilege_id")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		allColumns        = postgres.ColumnList{RoleIDColumn, PrivilegeIDColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn}
		defaultColumns    = postgres.ColumnList{CreatedAtColumn}
	)

	return rolesPrivilegesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RoleID:      RoleIDColumn,
		PrivilegeID: PrivilegeIDColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
